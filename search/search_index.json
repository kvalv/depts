{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 A CLI tool for transport departures. This is really just a wrapper around entur's graphql API (which is really great). The primary motivation for me is to just have a project where I can have a project and set up various infrastructure (documentation, automated tests, build artifacts, etc.). Commands \u00b6 Usage: depts <command> Flags: -h, --help Show context-sensitive help. --debug Enable debug mode Commands: show [<station>] List info for station add <name> <code> add a new station to database rm <id> Remove a station by its id associate <id> ls List stored stations list all favourite stations $ depts ls 1 Frydenlund NSR:StopPlace:58405 2 Forskningsparken NSR:StopPlace:59600 3 Skullerud NSR:StopPlace:58227 Matching station in depts show <name> \u00b6 The <name> for the station need not be exact. To figure out which station we're using, three checks are done in order: If <name> is empty, use the current network name and use any station bound to that network. If no such station exists, return an error. If <name> is not empty, check if there exists a station that exactly matches the name. For example, if the name is skullerud and there exists a station with that name, use the skullerud station. Otherwise, try to match on prefix. For example, if sku is provided, and there exists only one station with that prefix ( skullerud ), that station will be matched.","title":"Introduction"},{"location":"#introduction","text":"A CLI tool for transport departures. This is really just a wrapper around entur's graphql API (which is really great). The primary motivation for me is to just have a project where I can have a project and set up various infrastructure (documentation, automated tests, build artifacts, etc.).","title":"Introduction"},{"location":"#commands","text":"Usage: depts <command> Flags: -h, --help Show context-sensitive help. --debug Enable debug mode Commands: show [<station>] List info for station add <name> <code> add a new station to database rm <id> Remove a station by its id associate <id> ls List stored stations list all favourite stations $ depts ls 1 Frydenlund NSR:StopPlace:58405 2 Forskningsparken NSR:StopPlace:59600 3 Skullerud NSR:StopPlace:58227","title":"Commands"},{"location":"#matching-station-in-depts-show-name","text":"The <name> for the station need not be exact. To figure out which station we're using, three checks are done in order: If <name> is empty, use the current network name and use any station bound to that network. If no such station exists, return an error. If <name> is not empty, check if there exists a station that exactly matches the name. For example, if the name is skullerud and there exists a station with that name, use the skullerud station. Otherwise, try to match on prefix. For example, if sku is provided, and there exists only one station with that prefix ( skullerud ), that station will be matched.","title":"Matching station in depts show &lt;name&gt;"},{"location":"installation/","text":"Download this project: git pull https://github.com/kvalv/depts Ensure go1.18 is available Install or build the binary: make build # build the binary in current directory. Available as ./depts # OR make install # build and install in directory named by $GOBIN","title":"Installation"}]}